// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsInfoNotFound(err error) bool {
	e := errors.FromError(err)
	return e.Reason == BaseappInterfaceError_INFO_NOT_FOUND.String() && e.Code == 404
}

func ErrorInfoNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, BaseappInterfaceError_INFO_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	e := errors.FromError(err)
	return e.Reason == BaseappInterfaceError_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, BaseappInterfaceError_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsInvalidAccountOrPassword(err error) bool {
	e := errors.FromError(err)
	return e.Reason == BaseappInterfaceError_INVALID_ACCOUNT_OR_PASSWORD.String() && e.Code == 501
}

func ErrorInvalidAccountOrPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(501, BaseappInterfaceError_INVALID_ACCOUNT_OR_PASSWORD.String(), fmt.Sprintf(format, args...))
}

func IsUNAUTHORIZED(err error) bool {
	e := errors.FromError(err)
	return e.Reason == BaseappInterfaceError_UNAUTHORIZED.String() && e.Code == 403
}

func ErrorUNAUTHORIZED(format string, args ...interface{}) *errors.Error {
	return errors.New(403, BaseappInterfaceError_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BaseappInterfaceHTTPServer interface {
	GetComment(context.Context, *GetCommentRequest) (*GetCommentReply, error)
	GetCommentList(context.Context, *GetCommentListRequest) (*GetCommentListReply, error)
	GetCommentSubject(context.Context, *GetCommentSubjectRequest) (*GetCommentSubjectReply, error)
	GetReplyList(context.Context, *GetReplyListRequest) (*GetCommentListReply, error)
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	SaveComment(context.Context, *SaveCommentRequest) (*SaveCommentReply, error)
}

func RegisterBaseappInterfaceHTTPServer(s *http.Server, srv BaseappInterfaceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/comment/subject", _BaseappInterface_GetCommentSubject0_HTTP_Handler(srv))
	r.POST("/api/comment", _BaseappInterface_SaveComment0_HTTP_Handler(srv))
	r.GET("/api/comment/list", _BaseappInterface_GetCommentList0_HTTP_Handler(srv))
	r.GET("/api/comment/reply", _BaseappInterface_GetReplyList0_HTTP_Handler(srv))
	r.GET("/api/comment/{id}", _BaseappInterface_GetComment0_HTTP_Handler(srv))
	r.POST("/api/comment/like/{id}", _BaseappInterface_LikeComment0_HTTP_Handler(srv))
	r.POST("/api/account/login", _BaseappInterface_Login0_HTTP_Handler(srv))
}

func _BaseappInterface_GetCommentSubject0_HTTP_Handler(srv BaseappInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.baseapp.interface.v1.BaseappInterface/GetCommentSubject")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommentSubject(ctx, req.(*GetCommentSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentSubjectReply)
		return ctx.Result(200, reply)
	}
}

func _BaseappInterface_SaveComment0_HTTP_Handler(srv BaseappInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.baseapp.interface.v1.BaseappInterface/SaveComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveComment(ctx, req.(*SaveCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveCommentReply)
		return ctx.Result(200, reply)
	}
}

func _BaseappInterface_GetCommentList0_HTTP_Handler(srv BaseappInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.baseapp.interface.v1.BaseappInterface/GetCommentList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommentList(ctx, req.(*GetCommentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentListReply)
		return ctx.Result(200, reply)
	}
}

func _BaseappInterface_GetReplyList0_HTTP_Handler(srv BaseappInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReplyListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.baseapp.interface.v1.BaseappInterface/GetReplyList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReplyList(ctx, req.(*GetReplyListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentListReply)
		return ctx.Result(200, reply)
	}
}

func _BaseappInterface_GetComment0_HTTP_Handler(srv BaseappInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.baseapp.interface.v1.BaseappInterface/GetComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComment(ctx, req.(*GetCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentReply)
		return ctx.Result(200, reply)
	}
}

func _BaseappInterface_LikeComment0_HTTP_Handler(srv BaseappInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.baseapp.interface.v1.BaseappInterface/LikeComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LikeComment(ctx, req.(*LikeCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeCommentReply)
		return ctx.Result(200, reply)
	}
}

func _BaseappInterface_Login0_HTTP_Handler(srv BaseappInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.baseapp.interface.v1.BaseappInterface/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

type BaseappInterfaceHTTPClient interface {
	GetComment(ctx context.Context, req *GetCommentRequest, opts ...http.CallOption) (rsp *GetCommentReply, err error)
	GetCommentList(ctx context.Context, req *GetCommentListRequest, opts ...http.CallOption) (rsp *GetCommentListReply, err error)
	GetCommentSubject(ctx context.Context, req *GetCommentSubjectRequest, opts ...http.CallOption) (rsp *GetCommentSubjectReply, err error)
	GetReplyList(ctx context.Context, req *GetReplyListRequest, opts ...http.CallOption) (rsp *GetCommentListReply, err error)
	LikeComment(ctx context.Context, req *LikeCommentRequest, opts ...http.CallOption) (rsp *LikeCommentReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	SaveComment(ctx context.Context, req *SaveCommentRequest, opts ...http.CallOption) (rsp *SaveCommentReply, err error)
}

type BaseappInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewBaseappInterfaceHTTPClient(client *http.Client) BaseappInterfaceHTTPClient {
	return &BaseappInterfaceHTTPClientImpl{client}
}

func (c *BaseappInterfaceHTTPClientImpl) GetComment(ctx context.Context, in *GetCommentRequest, opts ...http.CallOption) (*GetCommentReply, error) {
	var out GetCommentReply
	pattern := "/api/comment/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.baseapp.interface.v1.BaseappInterface/GetComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BaseappInterfaceHTTPClientImpl) GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...http.CallOption) (*GetCommentListReply, error) {
	var out GetCommentListReply
	pattern := "/api/comment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.baseapp.interface.v1.BaseappInterface/GetCommentList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BaseappInterfaceHTTPClientImpl) GetCommentSubject(ctx context.Context, in *GetCommentSubjectRequest, opts ...http.CallOption) (*GetCommentSubjectReply, error) {
	var out GetCommentSubjectReply
	pattern := "/api/comment/subject"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.baseapp.interface.v1.BaseappInterface/GetCommentSubject"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BaseappInterfaceHTTPClientImpl) GetReplyList(ctx context.Context, in *GetReplyListRequest, opts ...http.CallOption) (*GetCommentListReply, error) {
	var out GetCommentListReply
	pattern := "/api/comment/reply"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.baseapp.interface.v1.BaseappInterface/GetReplyList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BaseappInterfaceHTTPClientImpl) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...http.CallOption) (*LikeCommentReply, error) {
	var out LikeCommentReply
	pattern := "/api/comment/like/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.baseapp.interface.v1.BaseappInterface/LikeComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BaseappInterfaceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/api/account/login"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.baseapp.interface.v1.BaseappInterface/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BaseappInterfaceHTTPClientImpl) SaveComment(ctx context.Context, in *SaveCommentRequest, opts ...http.CallOption) (*SaveCommentReply, error) {
	var out SaveCommentReply
	pattern := "/api/comment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.baseapp.interface.v1.BaseappInterface/SaveComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

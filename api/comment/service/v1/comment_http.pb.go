// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CommentHTTPServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentReply, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error)
	GetComment(context.Context, *GetCommentRequest) (*GetCommentReply, error)
	GetCommentLiked(context.Context, *GetCommentLikedRequest) (*GetCommentLikedReply, error)
	GetCommentSubject(context.Context, *GetCommentSubjectRequest) (*GetCommentSubjectReply, error)
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentReply, error)
	ListComment(context.Context, *ListCommentRequest) (*ListCommentReply, error)
	ListCommentSubject(context.Context, *ListCommentSubjectRequest) (*ListCommentSubjectReply, error)
	ListSubComment(context.Context, *ListSubCommentRequest) (*ListCommentReply, error)
}

func RegisterCommentHTTPServer(s *http.Server, srv CommentHTTPServer) {
	r := s.Route("/")
	r.POST("/comment", _Comment_CreateComment0_HTTP_Handler(srv))
	r.POST("/comment/like", _Comment_LikeComment0_HTTP_Handler(srv))
	r.DELETE("/comment", _Comment_DeleteComment0_HTTP_Handler(srv))
	r.GET("/comment/list", _Comment_ListComment0_HTTP_Handler(srv))
	r.GET("/comment/sub/list", _Comment_ListSubComment0_HTTP_Handler(srv))
	r.GET("/comment/subject", _Comment_GetCommentSubject0_HTTP_Handler(srv))
	r.GET("/comment/subject/list", _Comment_ListCommentSubject0_HTTP_Handler(srv))
	r.GET("/comment/liked", _Comment_GetCommentLiked0_HTTP_Handler(srv))
	r.GET("/comment/{id}", _Comment_GetComment0_HTTP_Handler(srv))
}

func _Comment_CreateComment0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/CreateComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateComment(ctx, req.(*CreateCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCommentReply)
		return ctx.Result(200, reply)
	}
}

func _Comment_LikeComment0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/LikeComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LikeComment(ctx, req.(*LikeCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeCommentReply)
		return ctx.Result(200, reply)
	}
}

func _Comment_DeleteComment0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/DeleteComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteComment(ctx, req.(*DeleteCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCommentReply)
		return ctx.Result(200, reply)
	}
}

func _Comment_ListComment0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/ListComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListComment(ctx, req.(*ListCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommentReply)
		return ctx.Result(200, reply)
	}
}

func _Comment_ListSubComment0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSubCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/ListSubComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSubComment(ctx, req.(*ListSubCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommentReply)
		return ctx.Result(200, reply)
	}
}

func _Comment_GetCommentSubject0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/GetCommentSubject")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommentSubject(ctx, req.(*GetCommentSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentSubjectReply)
		return ctx.Result(200, reply)
	}
}

func _Comment_ListCommentSubject0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommentSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/ListCommentSubject")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCommentSubject(ctx, req.(*ListCommentSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommentSubjectReply)
		return ctx.Result(200, reply)
	}
}

func _Comment_GetCommentLiked0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentLikedRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/GetCommentLiked")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommentLiked(ctx, req.(*GetCommentLikedRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentLikedReply)
		return ctx.Result(200, reply)
	}
}

func _Comment_GetComment0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/comment.service.v1.Comment/GetComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComment(ctx, req.(*GetCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentReply)
		return ctx.Result(200, reply)
	}
}

type CommentHTTPClient interface {
	CreateComment(ctx context.Context, req *CreateCommentRequest, opts ...http.CallOption) (rsp *CreateCommentReply, err error)
	DeleteComment(ctx context.Context, req *DeleteCommentRequest, opts ...http.CallOption) (rsp *DeleteCommentReply, err error)
	GetComment(ctx context.Context, req *GetCommentRequest, opts ...http.CallOption) (rsp *GetCommentReply, err error)
	GetCommentLiked(ctx context.Context, req *GetCommentLikedRequest, opts ...http.CallOption) (rsp *GetCommentLikedReply, err error)
	GetCommentSubject(ctx context.Context, req *GetCommentSubjectRequest, opts ...http.CallOption) (rsp *GetCommentSubjectReply, err error)
	LikeComment(ctx context.Context, req *LikeCommentRequest, opts ...http.CallOption) (rsp *LikeCommentReply, err error)
	ListComment(ctx context.Context, req *ListCommentRequest, opts ...http.CallOption) (rsp *ListCommentReply, err error)
	ListCommentSubject(ctx context.Context, req *ListCommentSubjectRequest, opts ...http.CallOption) (rsp *ListCommentSubjectReply, err error)
	ListSubComment(ctx context.Context, req *ListSubCommentRequest, opts ...http.CallOption) (rsp *ListCommentReply, err error)
}

type CommentHTTPClientImpl struct {
	cc *http.Client
}

func NewCommentHTTPClient(client *http.Client) CommentHTTPClient {
	return &CommentHTTPClientImpl{client}
}

func (c *CommentHTTPClientImpl) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...http.CallOption) (*CreateCommentReply, error) {
	var out CreateCommentReply
	pattern := "/comment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/CreateComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...http.CallOption) (*DeleteCommentReply, error) {
	var out DeleteCommentReply
	pattern := "/comment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/DeleteComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) GetComment(ctx context.Context, in *GetCommentRequest, opts ...http.CallOption) (*GetCommentReply, error) {
	var out GetCommentReply
	pattern := "/comment/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/GetComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) GetCommentLiked(ctx context.Context, in *GetCommentLikedRequest, opts ...http.CallOption) (*GetCommentLikedReply, error) {
	var out GetCommentLikedReply
	pattern := "/comment/liked"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/GetCommentLiked"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) GetCommentSubject(ctx context.Context, in *GetCommentSubjectRequest, opts ...http.CallOption) (*GetCommentSubjectReply, error) {
	var out GetCommentSubjectReply
	pattern := "/comment/subject"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/GetCommentSubject"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...http.CallOption) (*LikeCommentReply, error) {
	var out LikeCommentReply
	pattern := "/comment/like"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/LikeComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) ListComment(ctx context.Context, in *ListCommentRequest, opts ...http.CallOption) (*ListCommentReply, error) {
	var out ListCommentReply
	pattern := "/comment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/ListComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) ListCommentSubject(ctx context.Context, in *ListCommentSubjectRequest, opts ...http.CallOption) (*ListCommentSubjectReply, error) {
	var out ListCommentSubjectReply
	pattern := "/comment/subject/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/ListCommentSubject"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) ListSubComment(ctx context.Context, in *ListSubCommentRequest, opts ...http.CallOption) (*ListCommentReply, error) {
	var out ListCommentReply
	pattern := "/comment/sub/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/comment.service.v1.Comment/ListSubComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
